/*
 *https://school.programmers.co.kr/learn/courses/30/lessons/49191
 *
 *
 *
 n명의 권투선수가 권투 대회에 참여했고 각각 1번부터 n번까지 번호를 받았습니다.
 권투 경기는 1대1 방식으로 진행이 되고, 만약 A 선수가 B 선수보다 실력이 좋다면 A 선수는 B 선수를 항상 이깁니다.
 심판은 주어진 경기 결과를 가지고 선수들의 순위를 매기려 합니다. 하지만 몇몇 경기 결과를 분실하여 정확하게 순위를 매길 수 없습니다.

선수의 수 n, 경기 결과를 담은 2차원 배열 results가 매개변수로 주어질 때 정확하게 순위를 매길 수 있는 선수의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
선수의 수는 1명 이상 100명 이하입니다.
경기 결과는 1개 이상 4,500개 이하입니다.
results 배열 각 행 [A, B]는 A 선수가 B 선수를 이겼다는 의미입니다.
모든 경기 결과에는 모순이 없습니다.
입출력 예
n	results	return
5	[[4, 3], [4, 2], [3, 2], [1, 2], [2, 5]]	2
입출력 예 설명
2번 선수는 [1, 3, 4] 선수에게 패배했고 5번 선수에게 승리했기 때문에 4위입니다.
5번 선수는 4위인 2번 선수에게 패배했기 때문에 5위입니다.
 */
#include "stdafx.h"
#define DEBUG_MODE 1
int solution(int n, vector<vector<int>> results) {
	int answer = 0;
	array<array<int, 100>,100> board;
	constexpr int MAX = numeric_limits<int>::max();

	for (auto& a : board)
	{
		for(auto& b : a)
			b = MAX;
	}

	for (int i = 0; i < n; i++)
		board[i][i] = 0;

	for (auto match : results)
	{
		auto[winner, looser] = VectorToTuple::vectorToTuple<int, 2>(match);
		winner--; looser--;
		board[winner][looser] = 1;
		board[looser][winner] = -1;
	}

	for (int m = 0; m < n; m++)
	{
		for (int s = 0; s < n; s++)
		{
			for (int e = 0; e < n; e++)
			{
				auto& se = board[s][e];
				auto& es = board[e][s];
				const auto& sm = board[s][m];
				const auto& me = board[m][e];

				if(sm == 1 && me == 1)
				{
					se = 1;
					es = -1;
				}
			}
		}
	}
#ifdef DEBUG_MODE
		for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << board[i][j] << " ";
		}
		cout << endl;
	}
#endif

	for (int i = 0; i < n; i++)
	{
		bool isValid = true;
		for(int j = 0; j < n; j++)
		{
			if(board[i][j] == MAX)
			{
				isValid = false;
				break;
			}
		}
		if(isValid)
			answer++;
	}


	return answer;
}

int main()
{
	vector<vector<int>> results {{ 4, 3},{4, 2},{3, 2},{1, 2},{2, 5 }};


	cout << solution(5, results);
}